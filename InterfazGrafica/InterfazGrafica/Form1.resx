<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>